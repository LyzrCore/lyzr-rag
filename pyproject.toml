[build-system]
build-backend = "poetry.core.masonry.api"
requires = ["poetry-core"]

[tool.codespell]
check-filenames = true
check-hidden = true
ignore-words-list = "astroid,gallary,momento,narl,ot,rouge"
# Feel free to un-skip examples, and experimental, you will just need to
# work through many typos (--write-changes and --interactive will help)
skip = "./lyzr_rag/_static,./examples,./experimental,*.csv,*.html,*.json,*.jsonl,*.pdf,*.txt,*.ipynb"

[tool.mypy]
disallow_untyped_defs = true
# Remove venv skip when integrated with pre-commit
exclude = ["_static", "build", "examples", "notebooks", "venv"]
ignore_missing_imports = true
python_version = "3.8"

[tool.poetry]
authors = ["Lyzr <contact@lyzr.ai>"]
classifiers = [
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Application Frameworks",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
description = "Interface between LLMs and your data"
documentation = "https://docs.lyzr.ai/"
homepage = "https://lyzr.ai"
include = ["lyzr_rag/_static"]
keywords = ["LLM", "NLP", "RAG", "data", "devtools", "index", "retrieval"]
license = "MIT"
name = "lyzr-rag"
packages = [{include = "lyzr_rag"}]
readme = "README.md"
repository = "https://github.com/Lyzrcore/lyzr-rag"
version = "0.1.5"

[tool.poetry.dependencies]
SQLAlchemy = {extras = ["asyncio"], version = ">=1.4.49"}
beautifulsoup4 = {optional = true, version = "^4.12.2"}
dataclasses-json = "*"
deprecated = ">=1.2.9.3"
fsspec = ">=2023.5.0"
httpx = "*"
langchain = {optional = true, version = ">=0.0.303"}
nest-asyncio = "^1.5.8"
nltk = "^3.8.1"
numpy = "*"
openai = ">=1.1.0"
pandas = "*"
python = ">=3.8.1,<4.0"
tenacity = ">=8.2.0,<9.0.0"
tiktoken = ">=0.3.3"
typing-extensions = ">=4.5.0"
typing-inspect = ">=0.8.0"
requests = ">=2.31.0"  # Pin to avoid CVE-2023-32681 in requests 2.3 to 2.30
gradientai = {optional = true, version = ">=1.4.0"}
asyncpg = {optional = true, version = "^0.28.0"}
pgvector = {optional = true, version = "^0.1.0"}
optimum = {extras = ["onnxruntime"], optional = true, version = "^1.13.2"}
sentencepiece = {optional = true, version = "^0.1.99"}
transformers = {extras = ["torch"], optional = true, version = "^4.33.1"}
guidance = {optional = true, version = "^0.0.64"}
lm-format-enforcer = {optional = true, version = "^0.4.3"}
jsonpath-ng = {optional = true, version = "^1.6.0"}
rank-bm25 = {optional = true, version = "^0.2.2"}
scikit-learn = {optional = true, version = "*"}
spacy = {optional = true, version = "^3.7.1"}
aiohttp = "^3.8.6"
networkx = ">=3.0"
psycopg2-binary = {optional = true, version = "^2.9.9"}
dirtyjson = "^1.0.8"

[tool.poetry.extras]
gradientai = [
    "gradientai",
]
html = [
    "beautifulsoup4",
]
langchain = [
    "langchain",
]
local_models = [
    "optimum",
    "sentencepiece",
    "transformers",
]
postgres = [
    "asyncpg",
    "pgvector",
    "psycopg2-binary",
]
query_tools = [
    "guidance",
    "jsonpath-ng",
    "lm-format-enforcer",
    "rank-bm25",
    "scikit-learn",
    "spacy",
]

[tool.poetry.group.dev.dependencies]
black = {extras = ["jupyter"], version = "<=23.9.1,>=23.7.0"}
boto3 = "1.33.6"  # needed for tests
botocore = ">=1.33.13"
codespell = {extras = ["toml"], version = ">=v2.2.6"}
docker = "^7.0.0"
google-ai-generativelanguage = {python = ">=3.9,<3.12", version = "^0.4.0"}
ipython = "8.10.0"
jupyter = "^1.0.0"
motor = "^3.3.2"
mypy = "0.991"
pre-commit = "3.2.0"
pylint = "2.15.10"
pymongo = "^4.5.0"  # needed for tests
pypdf = "*"
pytest = "7.2.1"
pytest-asyncio = "0.21.0"
pytest-dotenv = "0.5.2"
pytest-mock = "3.11.1"
rake-nltk = "1.0.6"
ruff = "0.0.292"
tree-sitter-languages = "^1.8.0"
types-Deprecated = ">=0.1.0"
types-PyYAML = "^6.0.12.12"
types-protobuf = "^4.24.0.4"
types-redis = "4.5.5.0"
types-requests = "2.28.11.8"  # TODO: unpin when mypy>0.991
types-setuptools = "67.1.0.0"
vellum-ai = "^0.0.42"

[tool.poetry.group.docs]
optional = true

[tool.poetry.group.docs.dependencies]
autodoc-pydantic = "<=1.9.0"
docutils = "<0.17"
furo = ">=2023.3.27"
m2r2 = "0.3.2"
myst-nb = "0.17.2"
myst-parser = "0.18.1"
pydantic = "<2.0.0"
sphinx = ">=4.3.0"
sphinx-autobuild = "^2021.3.14"
sphinx-automodapi = "^0.16.0"
sphinx-reredirects = "^0.1.3"
sphinx-rtd-theme = "^1.3.0"
sphinxcontrib-gtagjs = "^0.2.1"

[tool.poetry.scripts]
llamaindex-cli = 'lyzr_rag.command_line.command_line:main'

[[tool.poetry.source]]
name = "nvidia-pypi"
priority = "supplemental"
url = "https://pypi.nvidia.com"

[tool.ruff]
exclude = [
    "_static",
    "examples",
    "notebooks",
]
ignore = [
    "COM812",  # Too aggressive
    "D212",  # Using D213
    "D417",  # Too aggressive
    "F541",  # Messes with prompts.py
    "TCH002",
    "UP006",  # Messes with pydantic
    "UP007",  # Wants | over Union, which breaks 3.8
]
# Feel free to add more here
select = [
    "ANN204",
    "B009",
    "B010",
    "B011",
    "B013",
    "B014",
    "C4",
    "COM812",
    "COM819",
    "D201",
    "D202",
    "D203",
    "D204",
    "D207",
    "D208",
    "D209",
    "D211",
    "D213",
    "D214",
    "D215",
    "D3",
    "D4",
    "E7",
    "EXE004",
    "F401",
    "F504",
    "F541",
    "F632",
    "FLY",
    "G010",
    "I",
    "PERF1",
    "PIE790",
    "PIE794",
    "PIE808",
    "PIE810",
    "PLC0414",
    "PLE2510",
    "PLE2512",
    "PLE2513",
    "PLE2514",
    "PLE2515",
    "PLR1701",
    "PLR1711",
    "PT001",
    "PT003",
    "PT006",
    "PT02",
    "PTH201",
    "PYI",
    "Q",
    "RET501",
    "RET502",
    "RET503",
    "RET504",
    "RSE",
    "RUF005",
    "RUF010",
    "RUF015",
    "RUF1",
    "SIM101",
    "SIM103",
    "SIM109",
    "SIM118",
    "SIM2",
    "SIM300",
    "SIM9",
    "TCH005",
    "TD006",
    "TID",
    "TRY201",
    "UP",
    "W",
]
target-version = "py38"
unfixable = [
    "ERA001",
]

[tool.ruff.flake8-annotations]
mypy-init-return = true

[tool.ruff.pydocstyle]
convention = "google"

[tool.tomlsort]
all = true
in_place = true
spaces_before_inline_comment = 2  # Match Python PEP 8
spaces_indent_inline_array = 4  # Match Python PEP 8
trailing_comma_inline_array = true

[tool.tomlsort.overrides."tool.poetry.dependencies"]
table_keys = false
